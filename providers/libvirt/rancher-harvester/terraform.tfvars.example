# URL of the libvirt server
# EXAMPLE:
# libvirt_uri = "test:///default"
# libvirt_uri = "qemu:///system"
# libvirt_uri = "qemu:///session"
# libvirt_uri = "qemu:///session?socket=${HOME}/.cache/libvirt/libvirt-sock"
# libvirt_uri = "qemu+ssh://root@192.168.100.10/system"
# libvirt_uri = "qemu+ssh://root@192.168.100.10/session"
# libvirt_uri = "qemu+ssh://${SSH_USER}@${FQDN}/system?socket=/var/run/libvirt/libvirt-sock"
# libvirt_uri = "qemu+ssh://${SSH_USER}@${FQDN}/session?socket=${HOME}/.cache/libvirt/libvirt-sock"
libvirt_uri = "qemu:///system"

# Path of the key file used to connect to the libvirt server
# Note this value will be appended to the libvirt_uri as a 'keyfile' query: <libvirt_uri>?keyfile=<libvirt_keyfile>
# EXAMPLE:
# libvirt_keyfile = "~/.ssh/custom_id"
libvirt_keyfile = ""

# # # Pool to be used to store all the volumes
# pool = "pool"

harvester_version = "v0.1.0"

# URL of the image to use
# EXAMPLE:
# lb_image_uri = "${HOME}/Documents/myImages/kvm/alpine/alpine-standard-3.12.3-x86_64.qcow2"
# lb_image_uri = "CentOS-7-x86_64-GenericCloud.qcow2"
# lb_image_uri = "https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/centos/CentOS-7-x86_64-GenericCloud.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/centos/CentOS-7-x86_64-GenericCloud-2009.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/centos/CentOS-8-GenericCloud-8.2.2004-20200611.2.x86_64.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/centos/CentOS-8-GenericCloud-8.3.2011-20201204.2.x86_64.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/coreos/fedora-coreos-33.20210217.3.0-qemu.x86_64.qcow2.xz"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/debian/debian-10.5.0-openstack-amd64.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/fedora/Fedora-Cloud-Base-32-1.6.x86_64.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/opensuse-leap/openSUSE-Leap-15.2-OpenStack.x86_64.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/opensuse-tumbleweed/openSUSE-Tumbleweed-JeOS.x86_64-OpenStack-Cloud.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/rancher-harvester/harvester-amd64.qcow2"
lb_image_uri = "${HOME}/Documents/myImages/kvm/rancher-k3os/k3os-amd64.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/rancher-os/rancheros.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/raspios/2020-12-11-raspios-buster-i386.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/sles/SLES15-SP2-JeOS.x86_64-15.2-OpenStack-Cloud-GM.qcow2"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/ubuntu/ubuntu-18.04-server-cloudimg-amd64.img"
# lb_image_uri = "${HOME}/Documents/myImages/kvm/ubuntu/ubuntu-20.04-server-cloudimg-amd64.img"

# URL of the image to use
# EXAMPLE:
# image_uri = "harvester-amd64.qcow2"
# image_uri = "https://github.com/rancher/harvester/releases/download/v0.1.0/harvester-amd64.img"
image_uri = "${HOME}/Documents/myImages/kvm/rancher-harvester/harvester-amd64.qcow2"

# URL of the kernel to use
# EXAMPLE:
# kernel_uri = "harvester-vmlinuz-amd64"
# kernel_uri = "https://github.com/rancher/harvester/releases/download/v0.1.0/harvester-vmlinuz-amd64"
kernel_uri = "${HOME}/Documents/myImages/iso/rancher-harvester/v0.1.0/amd64/harvester-vmlinuz-amd64"

# URL of the initrd to use
# EXAMPLE:
# initrd_uri = "harvester-initrd-amd64"
# initrd_uri = "https://github.com/rancher/harvester/releases/download/v0.1.0/harvester-initrd-amd64"
initrd_uri = "${HOME}/Documents/myImages/iso/rancher-harvester/v0.1.0/amd64/harvester-initrd-amd64"

# URL of the squashfs to use
# EXAMPLE:
# squashfs_uri = "harvester-kernel-amd64.squashfs"
# squashfs_uri = "https://github.com/rancher/harvester/releases/download/v0.1.0/harvester-kernel-amd64.squashfs"
squashfs_uri = "${HOME}/Documents/myImages/iso/rancher-harvester/v0.1.0/amd64/harvester-kernel-amd64.squashfs"

# URL of the iso to use
# EXAMPLE:
# iso_uri = "harvester-amd64.iso"
# iso_uri = "https://github.com/rancher/harvester/releases/download/v0.1.0/harvester-amd64.iso"
iso_uri = "${HOME}/Documents/myImages/iso/rancher-harvester/v0.1.0/amd64/harvester-amd64.iso"

# Identifier to make all your resources unique and avoid clashes with other users of this terraform project
# stack_name = "my-rancher-harvester-cluster"
stack_name = "rancher-harvester"

# CIDR of the network
network_cidr = "10.17.0.0/22"

# Enable creation of LB node
create_lb = true

# Number of master nodes
masters       = 1
master_memory = 5120
master_vcpu   = 2

# Number of worker nodes
workers       = 3
worker_memory = 5120
worker_vcpu   = 4

# Name of DNS domain
dns_domain = "rancher-harvester.local"

# Username for the cluster nodes
# EXAMPLE:
username = "rancher"

# Password for the cluster nodes
# EXAMPLE:
password = "linux"

# define the repositories to use for the loadbalancer node
# EXAMPLE:
# lb_repositories = {
#   repository1 = "http://example.my.repo.com/repository1/"
#   repository2 = "http://example.my.repo.com/repository2/"
# }
lb_repositories = {}

# Optional: Define the repositories to use
# EXAMPLE:
# repositories = {
#   repository1 = "http://example.my.repo.com/repository3/"
#   repository2 = "http://example.my.repo.com/repository4/"
# }
repositories = {}

# Minimum required packages. Do not remove them.
# Feel free to add more packages
packages = [
  "python3",
  "curl",
  "wget",
  "rsync",
  "jq",
  "which",
  "openssl",
  "iscsi-initiator-utils",
  "nfs-utils"
  # "open-iscsi",
  # "nfs-kernel-server"
]

# ssh keys to inject into all the nodes
# EXAMPLE:
# authorized_keys = [
#  "ssh-rsa <key-content>"
# ]
authorized_keys = [
  ""
]

# ssh key to launch the nodes with
# EXAMPLE:
# key_pair = "my_keypair"

# IMPORTANT: Replace these ntp servers with ones from your infrastructure
ntp_servers = ["TIME.google.com", "TIME1.google.com", "TIME2.google.com", "TIME3.google.com", "TIME4.google.com"]

# DNS servers for the nodes
# dns_nameservers = [
#     "172.28.0.2",
#     "8.8.8.8",
#     "8.8.4.4",
#     "1.1.1.1",
#     "1.0.0.1",
#     "168.95.1.1",
#     "168.95.192.1"
# ]
dns_nameservers = [
  "8.8.8.8",
  "8.8.4.4"
]

# Set node's hostname from DHCP server
#hostname_from_dhcp = false
